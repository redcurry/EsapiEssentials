<Window
    x:Class="EsapiEssentials.PluginRunner.MainWindow"
    x:ClassModifier="internal"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    xmlns:pr="clr-namespace:EsapiEssentials.PluginRunner"
    Title="ESAPI Essentials Plugin Runner"
    Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
    WindowStartupLocation="CenterScreen"
    Width="640" Height="640"
    >

    <Window.Resources>
        <pr:UnderscoreConverter x:Key="UnderscoreConverter" />
        <pr:PlansAndPlanSumsConverter x:Key="PlansAndPlanSumsConverter" />

        <!-- Sorted and grouped plans and plan sums -->
        <CollectionViewSource x:Key="PlansAndPlanSums" Source="{Binding PlansAndPlanSums}">
            <CollectionViewSource.SortDescriptions>
                <cm:SortDescription PropertyName="Id" />
            </CollectionViewSource.SortDescriptions>
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="CourseId" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>

        <!-- View for course group headings -->
        <DataTemplate x:Key="CourseHeaderTemplate">
            <TextBlock
                Text="{Binding Name, StringFormat=Course: \{0\}, Converter={StaticResource UnderscoreConverter}}"
                FontWeight="Bold"
                Opacity="0.6"
                />
        </DataTemplate>

        <!-- Style for course group container -->
        <Style x:Key="CourseContainerStyle" TargetType="GroupItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="GroupItem">
                        <StackPanel>
                            <ContentPresenter Margin="5,5,0,0" />
                            <ItemsPresenter Margin="5,3,5,0"/>
                        </StackPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <BooleanToVisibilityConverter x:Key="VisibilityConverter" />
    </Window.Resources>

    <Grid
        FocusManager.FocusedElement="{Binding ElementName=SearchTextBox}"
        Margin="10"
        >
        <Grid.RowDefinitions>
            <RowDefinition Height="2*"   />  <!-- Patient and plan list boxes-->
            <RowDefinition Height="1*"   />  <!-- Recent choices -->
            <RowDefinition Height="Auto" />  <!-- Run and exit buttons -->
        </Grid.RowDefinitions>

        <!-- Patient and plan list boxes -->
        <UniformGrid
            Grid.Row="0"
            Columns="2"
            >
            <DockPanel Margin="0,0,5,0">
                <TextBlock
                    DockPanel.Dock="Top"
                    Text="Patient (search by last name, first name, or ID):"
                    />
                <!-- Search box -->
                <TextBox
                    DockPanel.Dock="Top"
                    Name="SearchTextBox"
                    Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                    Margin="0,5,0,0"
                    >
                    <!-- Call the SearchPatientCommand when the SearchText is updated in the view model -->
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SourceUpdated">
                            <i:InvokeCommandAction Command="{Binding SearchPatientCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </TextBox>
                <!-- Patient matches -->
                <ListBox
                    DockPanel.Dock="Top"
                    ItemsSource="{Binding PatientMatches}"
                    SelectedItem="{Binding SelectedPatientMatch, NotifyOnSourceUpdated=True}"
                    Margin="0,5,0,0"
                    >
                    <!-- Call the OpenPatientCommand when the SelectedItem is updated in the view model -->
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SourceUpdated">
                            <i:InvokeCommandAction Command="{Binding OpenPatientCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock>
                                <Run Text="{Binding LastName}" />, <Run Text="{Binding FirstName}" /> (<Run Text="{Binding Id}" />)
                            </TextBlock>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </DockPanel>

            <DockPanel Margin="5,0,0,0">
                <DockPanel
                    DockPanel.Dock="Top"
                    HorizontalAlignment="Stretch"
                    >
                    <TextBlock
                        Text="Plans and plan sums in scope:"
                        />
                    <TextBlock
                        Text="Active plan"
                        HorizontalAlignment="Right"
                        />
                </DockPanel>
                <TextBlock
                    DockPanel.Dock="Bottom"
                    Text="Plan sums are shown in bold."
                    Margin="0,5,0,0"
                    />
                <!-- Plans and plan sums for the selected patient -->
                <ListBox
                    DockPanel.Dock="Top"
                    ItemsSource="{Binding Source={StaticResource PlansAndPlanSums}}"
                    SelectionChanged="PlansAndPlanSums_OnSelectionChanged"
                    Margin="0,5,0,0"
                    >
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <DockPanel>
                                <CheckBox
                                    Content="{Binding Id, Converter={StaticResource UnderscoreConverter}}"
                                    IsChecked="{Binding IsInScope}"
                                    >
                                    <CheckBox.Style>
                                        <Style TargetType="CheckBox">
                                            <Setter Property="FontWeight" Value="Normal" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Type}" Value="{x:Static pr:PlanType.PlanSum}">
                                                    <Setter Property="FontWeight" Value="Bold" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </CheckBox.Style>
                                </CheckBox>
                                <RadioButton
                                    IsChecked="{Binding IsActive}"
                                    GroupName="Active"
                                    HorizontalAlignment="Right"
                                    Visibility="{Binding CanBeActive, Converter={StaticResource VisibilityConverter}}"
                                    />
                            </DockPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <ListBox.GroupStyle>
                        <GroupStyle
                            HeaderTemplate="{StaticResource CourseHeaderTemplate}"
                            ContainerStyle="{StaticResource CourseContainerStyle}"
                            />
                    </ListBox.GroupStyle>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                    </ListBox.ItemContainerStyle>
                </ListBox>
            </DockPanel>
        </UniformGrid>

        <!-- Recent choices -->
        <DockPanel
            Grid.Row="1"
            Margin="0,10,0,0"
            >
            <TextBlock
                DockPanel.Dock="Top"
                Text="Recent choices (click to open, double-click to run):"
                />
            <DataGrid
                ItemsSource="{Binding Recents}"
                SelectedItem="{Binding SelectedRecent, NotifyOnSourceUpdated=True}"
                AutoGenerateColumns="False"
                IsReadOnly="True"
                SelectionUnit="FullRow"
                HeadersVisibility="Column"
                GridLinesVisibility="None"
                Background="White"
                Margin="0,5,0,0"
                >

                <DataGrid.Columns>
                    <!-- Patient ID -->
                    <DataGridTextColumn
                        Header="Patient ID1"
                        Binding="{Binding PatientId}"
                        Width="*"
                        />

                    <!-- PlanningItems in scope -->
                    <DataGridTextColumn
                        Header="PlanningItem(s) in Scope"
                        Binding="{Binding PlansAndPlanSumsInScope,
                            Converter={StaticResource PlansAndPlanSumsConverter}}"
                        Width="2*"
                        />

                    <!-- Active PlanSetup -->
                    <DataGridTextColumn
                        Header="Active PlanSetup"
                        Binding="{Binding ActivePlan.Id}"
                        Width="*"
                        />
                </DataGrid.Columns>

                <!-- Remove selection box around individual cells -->
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="BorderThickness" Value="0" />
                    </Style>
                </DataGrid.CellStyle>

                <i:Interaction.Triggers>
                    <!-- When recent entry is selected, open it -->
                    <i:EventTrigger EventName="SourceUpdated">
                        <i:InvokeCommandAction Command="{Binding OpenRecentEntryCommand}" />
                    </i:EventTrigger>

                    <!-- Double-click to open and run recent patient context -->
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding RunCommand}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </DataGrid>
        </DockPanel>

        <!-- Run and exit buttons -->
        <StackPanel
            Grid.Row="2"
            Orientation="Horizontal"
            HorizontalAlignment="Right"
            Margin="0,10,0,0"
            >
            <Button
                Content="Run"
                Command="{Binding RunCommand}"
                Width="75"
                />
        </StackPanel>
    </Grid>
</Window>
